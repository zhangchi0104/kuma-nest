org: otakuma
app: blog
service: blog
frameworkVersion: '4'
useDotenv: true
provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-2
  profile: blog-${sls:stage, 'dev'}
  environment:
    BLOG_METADATA_TABLE: ${env:BLOG_METADATA_TABLE}
    BLOG_CONTENT_BUCKET: ${env:BLOG_CONTENT_BUCKET}
    BLOG_ASSETS_BUCKET: ${env:BLOG_ASSETS_BUCKET}
    JWT_PUBLIC_KEY: ${env:JWT_PUBLIC_KEY}

custom:
  includeSecret:
    dev: true
    prod: false

  serverless-offline:
    printOutput: true

  customDomain:
    domainName: ${sls:stage}.api.chiz.dev
    basePath: 'v1'
    certificateName: '*.api.chiz.dev'
    hostedZoneId: Z05341373E3JETY6N02KR
    createRoute53Record: true
    createRoute53IPv6Record: true
    securityPolicy: tls_1_2
    endpointType: REGIONAL

plugins:
  # - serverless-webpack
  - serverless-offline
  - serverless-domain-manager

resources:
  Resources:
    BlogMetadata:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:BLOG_METADATA_TABLE}-${sls:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    BlogContentBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${env:BLOG_CONTENT_BUCKET}-${sls:stage}
    BlogAssetsBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${env:BLOG_ASSETS_BUCKET}-${sls:stage}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerPreferred
    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: 'sts:AssumeRole'
        Policies:
          - PolicyName: BlogLambdaExecutionRole-${sls:stage, 'dev'}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                # Log management
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 'arn:aws:logs:${aws:region}:${aws:accountId}:*'
                # s3 permission
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    - 'arn:aws:s3:::${env:BLOG_CONTENT_BUCKET}-${sls:stage}'
                    - 'arn:aws:s3:::${env:BLOG_ASSETS_BUCKET}-${sls:stage}'
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    - 'arn:aws:s3:::${env:BLOG_CONTENT_BUCKET}-${sls:stage}/*'
                    - 'arn:aws:s3:::${env:BLOG_ASSETS_BUCKET}-${sls:stage}/*'
                # DynamoDB permission
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                    - 'arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/blog-metadata-${sls:stage}'
                    - 'arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/blog-metadata-${sls:stage}/index/*'
    PublicReadPolicyForBucket:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket:
          Ref: BlogAssetsBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action:
                - 's3:GetObject'
              Resource: 'arn:aws:s3:::${env:BLOG_ASSETS_BUCKET}-${sls:stage}/*'

functions:
  main:
    handler: dist/main-serverless.handler
    role: LambdaExecutionRole
    events:
      - http:
          method: ANY
          path: /
      - http:
          method: ANY
          path: '{proxy+}'

package:
  individually: true
  patterns:
    - 'package.json'
    - 'yarn.lock'
    - 'dist/**'
    - '!node_modules/@aws-sdk/**'
    - '!node_modules/@aws*/**'
    - '!node_modules/@nestjs/cli/**'
    - '!node_modeules/@nestjs/schematics/**'
    - '!node_modules/@nestjs/testing/**'
    - '!node_modules/@swc/cl/**'
    - '!node_modules/@swc/core/**'
    - '!node_modules/@typescript-eslint/eslint-plugin/**'
    - '!node_modules/@typescript-eslint/parser/**'
    - '!node_modules/@vercel/ncc/**'
    - '!node_modules/eslint/**'
    - '!node_modules/eslint-config-prettier/**'
    - '!node_modules/eslint-plugin-prettier/**'
    - '!node_modules/husky/**'
    - '!node_modules/jest/**'
    - '!node_modules/prettier/**'
    - '!node_modules/serverless/**'
    - '!node_modules/serverless-domain-manager/**'
    - '!node_modules/serverless-dotenv-plugin/**'
    - '!node_modules/serverless-offline/**'
    - '!node_modules/source-map-support/**'
    - '!node_modules/supertest/**'
    - '!node_modules/ts-jest/**'
    - '!node_modules/ts-loader/**'
    - '!node_modules/ts-node/**'
    - '!node_modules/tsconfig-paths/**'
    - '!node_modules/typescript/**'
    - '!node_modules/@types/**/**'
    - '!node_modules/aws-lambda/**'
    - '!node_modules/aws-sdk/**'
    - '!node_modules/.ignored/**'
    - '!node_modules/@eslint*/**'
    - '!src/**'
    - '!.git/**'
    - '!test/**'
    - '!.env*'
